git init -> empezar en la carpeta un repositorio, es una base de datos
git add nombreArchivo -> la base de datos ahora sabe que existe este archivo
git commit -m "comentario" -> este envia el archivo/cambios a la base de datos
   Ahora se puede realizar cambios, pero no se guardan en el repositorio
git add . -> anhadir todos los cambios realizados en esa carpeta
git commit -m "segundo comentario" 
git status -> revisar estado del repositorio
git show -> todos los cambios hechos, quien los hizo, cuando
git log nombreArchivo -> historial de ese archivo
git push -> enviar a un repositorio remoto
git pull -> obtener desde un repositorio remoto

git config --global user.name "new name"
git config --global user.email "new email" 

git reset --hard -> elimina todo

git checkout version -> permite revisar esa version sin modificar la version actual
git checkout master -> permite volver a la version actual
Hacer git add desde una version anterior, actualiza la rama principal con la version anterior
y cualquier cambio hecho desde ahi en adelante

git rm permite borrar el archivo de git pero no elimina su historial en el sistema de versiones
puede ser recuperado con git checkout

git rm --cached -> elimina los archivos de staging y del proximo commit, queda en disco duro
git rm --force -> elimina los archivos de git y del disco duro. Se puede recuperar pero con comandos
   complejos

git reset -> Nos permite volver a versiones anteriores pero sin la posibilidad de regresar a la version
actual

git reset --hard -> elimina absolutamente todo sin la posibilidad de recuperar de alguna manera
git reset --soft -> se borra el historial pero mantiene archivos en staging, todo se aplica desde un nuevo commit
git reset --head -> Saca archivos de staging, no borra, esto solo sirve para que los cambios no se
                     envien con el ultimo commit que hagamos, con //git add// podemos incluirlos de nuevo

git commit -am "mensaje" -> abreviacion de add y commit, solo para archivos con add ya hechos anteriormente

gitk -> Abre interfaz grafica de los cambios hechos en git
------------------------------------------------

FLUJO DE TRABAJO REMOTO
git add
git commit
git push -> todo esto para enviar a un servidor remoto "github, gitlab, bitbucket o uno propio"

1. git fetch -> para traer archivos del servidor a local pero sin fusionar en disco duro
2. git merge -> para colocar los archivos del servidor en disco duro, o sea, fusionarlos con mi base local
git pull -> resume los anteriores comandos

------------------------------------------------

RAMAS
git branch "nombre" -> creacion de nueva rama
git checkout "nombre" -> cambiar de ramas, usar //git status// para verificar la rama actual
git add, git commit normales
git checkout master -> volver a la rama maestra

git merge "rama" -> fusiona dos ramas, generalmente la master con alguna otra

------------------------------------------------

CONFLICTOS
Conflicto generado, cambios en las mismas lineas, se debe decidir que codigo dejar
Una vez arreglado el codigo, se debe hacer un add y commit para que los cambios se guarden
en el repo local.

------------------------------------------------

SUBIR REPO LOCAL A REMOTO
Crear repo remoto, obtener enlace HTML
git remote add origin "ENLACE"
-------VERIFICACION-------
git remote
git remote -v
-------CONFLICTOS (NO HACE PUSH)-------
git remote rm origin
git remote add origin https://USER:PASS@github.com/username/reposname.git
--------------------------
Tercero: Traer la versiÃ³n del repositorio remoto y
hacer merge para crear un commit con los archivos
de ambas partes. Podemos usar git fetch y git merge
o solo el git pull con el flag --allow-unrelated-histories:
git pull origin master --allow-unrelated-histories
--------------------------
git push origin master

-------CONFIGURACION LLAVES SSH LOCALES-------
1. Crear llave privada y publica
2. Enviar llave publica al repo remoto
/// LAS LLAVES NO SE CREAN POR REPOSITORIO, SE CREAN POR PERSONA ///
COMANDO : ssh-keygen -t rsa -b 4096 -C "nenrique0112@gmail.com"
EXP     : ssh-keygen -t "algoritmoUsado" -b "complejidadAlgo" -C "correoGithub"
3. Escoger ubicacion de guardado de llave ssh (se recomienda dejarlo en home del usuario)
4. Escribir passphrase "password con espacios"
5. Revisar que el servidor de llaves local este encendido
>  eval $(ssh-agent -s)
6. Agregar la llave a ese servidor
> ssh-add "direccion de la llave"

//////// AVISO : CREAR LLAVE PRIVADA Y PUBLICA POR CADA COMPUTADOR QUE USE ////////

7. Agregar la llave SSH a nuestra cuenta en Github
8. Cambiar link del repositorio (git bash) por el de SSH de Github
>  git remote set-url origin "ssh de github"
git remote set-url "repositorio a trabajar" "ssh de github"

//////// AVISO : REALIZAR UN PULL ANTES DE HACER UN PUSH ////////

-------TAGS Y VERSIONES-------
> alias : permite poner un nombre mas corto a un comando bastante largo
alias arbolito="git log --all --graph --decorate --oneline"
Se usa con solo poner el nombre "arbolito"

----CREACION DE TAGS----
> git tag -a "nombre de tag" -m "mensaje para el commit" -hash-
              Por convencion se usa v0.x
Revisar los tags creados
> git show-ref --tags
Subir el tag a Github
> git pull origin master
> git push origin --tags
----ERROR EN LA CREACION DE TAG O ELIMINAR----
> git tag -d "nombreTag" // ESTO NO LO ELIMINA DE GITHUB
> git push origin :refs/tags/"nombreTag"

/// SUBIR RAMAS A GITHUB
> git push origin "nombreRama"

-------MULTIPLES COLABORADORES EN GITHUB-------
1. Settings del repo en github
2. Collaborators
3. Enter collaborator's username/full name/email and add him/her

-------FLUJO DE TRABAJO PROFESIONAL-------
----MERGE DE RAMAS DE DEV. A MASTER----
//// AVISO: LOS ARCHIVOS BINARIO NO DEBEN IR EN EL REPOSITORIO ////
1. git checkout "rama"
2. git pull origin "rama"
   // HACER EL TRABAJO NECESARIO
3. git push origin "rama"
4. git checkout master
5. git merge "rama" -m "mensaje"

----GIT CLEAN----
Sirve para borrar archivos que se crearon accidentalmente o simplemente se los
quiere eliminar
> git clean --dry-run : sirve para saber que archivos estamos borrando
//// AVISO : SE DEBE TOMAR EN CUENTA EL ARCHIVO .gitignore Y QUE GIT NO TOMA EN CUENTA
             LAS CARPETAS, SOLO LOS ARCHIVOS ////
> git clean -f : esto se hace para confirmar el comando y proceder a eliminar archivos

----GIT CHERRY-PICK----
Sirve para traer a la rama actual un commit viejo de otra rama
> (master) git cherry-pick "idCommitViejo"
//// AVISO : CHERRY-PICK ES UNA MALA PRACTICA ////

----GIT AMEND----
Sirve para arreglar errores del tipo mensajes erroneos (-m "footer cambiado" / pero no cambie el footer)
1. Hacer lo que deberia estar en el commit anterior (cambiar el footer)
2. AÃ±adir el cambio realizado (git add archivoTrabajado)
3. Chequear (git status)
4. git commit --amend (cambiar el mensaje si es necesario)

----RECUPERAR ARCHIVOS----
> git reflog
> git reset --soft || git reset --hard {idCommit}
